from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes

from bot.config import (
    MODE_OPTIONS, LANG_OPTIONS, LANG_BUTTON,
    REFINERS,
)
from bot.keyboards import make_kb, make_refiners_kb
from bot.gigachat import call_gigachat
from bot.prompts import (
    build_rewrite_messages, build_structure_messages,
    build_hypotheses_messages, build_frameworks_messages,
    build_refine_messages,
    build_questions_with_context, build_more_questions_messages, build_followups_messages,
    scenario_instruction,
)

BTN_MORE_Q = "–ï—â—ë –≤–æ–ø—Ä–æ—Å—ã"
BTN_FOLLOWUPS = "–§–æ–ª–ª–æ—É-–∞–ø—ã"


def _parse_position_company(t: str, lang: str):
    sep = " –≤ " if lang == "ru" else " at "
    if sep not in t:
        raise ValueError(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: [–î–æ–ª–∂–Ω–æ—Å—Ç—å] –≤ [–ö–æ–º–ø–∞–Ω–∏—è]" if lang == "ru"
            else "Use format: [Position] at [Company]"
        )
    pos, comp = t.split(sep, 1)
    pos, comp = pos.strip(), comp.strip()
    if not pos or not comp:
        raise ValueError(
            "–£–∫–∞–∂–∏—Ç–µ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –∏ –∫–æ–º–ø–∞–Ω–∏—é" if lang == "ru" else "Provide both position and company"
        )
    return pos, comp


async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.setdefault("lang", "ru")
    ctx.user_data.setdefault("creativity", 3)
    ctx.user_data.setdefault("mode", "action")
    lang = ctx.user_data["lang"]

    if lang == "ru":
        msg = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–∞. –ü–æ–º–æ–≥–∞—é –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º —Å –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏\n\n"
            "–°—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
            "üîÅ –≠–∫—à–Ω-—Ç–∞–π—Ç–ª—ã ‚Äî –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –±–∏–∑–Ω–µ—Å-—Ñ—Ä–∞–∑—É –∏–ª–∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—Ä–∞–∑ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–ª–∞–π–¥–∞\n"
            "‚ùì –í–æ–ø—Ä–æ—Å—ã ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞\n"
            "üß© –°—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Äî —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ—Ä–∏–ª–∞–π–Ω –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∑–∞–¥–∞—á–∏\n"
            "üîç –ì–∏–ø–æ—Ç–µ–∑—ã ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–∏–ø–æ—Ç–µ–∑—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥—Ä–∞–π–≤–µ—Ä–∞–º, –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã\n"
            "‚öôÔ∏è –§—Ä–µ–π–º–≤–æ—Ä–∫–∏ ‚Äî –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø–∑—ã–∫¬ª –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞."
        )
    else:
        msg = (
            "üëã Hello! I'm an AI consulting bot.\n\n"
            "Scenarios:\n"
            "üîÅ Action titles ‚Äî turn a short business phrase into a slide title\n"
            "‚ùì Questions ‚Äî generate strategic interview questions\n"
            "üß© Structure ‚Äî build a storyline for presentation\n"
            "üîç Hypotheses ‚Äî generate hypotheses grouped by drivers for specific problem\n"
            "‚öôÔ∏è Frameworks ‚Äî suggest analytical models with rationale for specific problem\n\n"
            "Choose a scenario below or click on 'Language' to change language."
        )

    kb = [["–≠–∫—à–Ω-—Ç–∞–π—Ç–ª—ã", "–í–æ–ø—Ä–æ—Å—ã"], ["–°—Ç—Ä—É–∫—Ç—É—Ä–∞", "–ì–∏–ø–æ—Ç–µ–∑—ã"], ["–§—Ä–µ–π–º–≤–æ—Ä–∫–∏", LANG_BUTTON]]
    await update.message.reply_text(msg, reply_markup=make_kb(kb), parse_mode="HTML")
    try:
        await update.message.delete()
    except Exception:
        pass


async def handle_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    ud = ctx.user_data
    lang = ud.get("lang", "ru")

    if text == "–ú–µ–Ω—é":
        ud.pop("q_state", None)
        ud.pop("q_session", None)
        return await start(update, ctx)

    if text == LANG_BUTTON:
        kb = [list(LANG_OPTIONS.keys()), ["–ú–µ–Ω—é"]]
        msg = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:" if lang == "ru" else "Select language:"
        return await update.message.reply_text(msg, reply_markup=make_kb(kb))
    if text in LANG_OPTIONS:
        ud["lang"] = LANG_OPTIONS[text]
        lang_name = "–†—É—Å—Å–∫–∏–π" if ud["lang"] == "ru" else "English"
        await update.message.reply_text(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {lang_name} / Language changed to {lang_name}")
        return await start(update, ctx)

    if text in MODE_OPTIONS:
        mode = MODE_OPTIONS[text]
        ud["mode"] = mode

        if mode == "questions":
            ud["q_state"] = "await_pc"
            ud.pop("q_session", None)

        instr = scenario_instruction(mode, lang)
        return await update.message.reply_text(instr, reply_markup=make_kb([["–ú–µ–Ω—é"]]))

    if ud.get("mode") == "questions":
        q_state = ud.get("q_state")

        if q_state == "await_pc":
            try:
                pos, comp = _parse_position_company(text, lang)
            except ValueError as e:
                return await update.message.reply_text(str(e), reply_markup=make_kb([["–ú–µ–Ω—é"]]))

            ud["q_session"] = {"position": pos, "company": comp}
            ud["q_state"] = "await_context"

            hint = (
                "–¢–µ–ø–µ—Ä—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–≤—å—é (—Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥).\n"
                "–ü—Ä–∏–º–µ—Ä—ã: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏/—Ñ—É–Ω–∫—Ü–∏–∏, —Ä–æ—Å—Ç, —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç, –≤—ã—Ö–æ–¥ –Ω–∞ —Ä—ã–Ω–æ–∫, "
                "—Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, M&A/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç.–¥."
                if lang == "ru" else
                "Now describe the interview context in a separate message (free text).\n"
                "Examples: company/function diagnostics, growth, cost reduction, market entry, "
                "digital transformation, M&A/integration, etc."
            )
            return await update.message.reply_text(hint, reply_markup=make_kb([["–ú–µ–Ω—é"]]))

        if q_state == "await_context":
            sess = ud.get("q_session") or {}
            pos, comp = sess.get("position"), sess.get("company")
            if not (pos and comp):
                ud["q_state"] = "await_pc"
                return await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∫–æ–º–ø–∞–Ω–∏—é –∑–∞–Ω–æ–≤–æ." if lang == "ru" else "Please enter position and company again.",
                    reply_markup=make_kb([["–ú–µ–Ω—é"]])
                )

            context_txt = text
            await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..." if lang == "ru" else "Processing...",
                                            reply_markup=ReplyKeyboardRemove())
            try:
                msgs = build_questions_with_context(pos, comp, context_txt, lang)
                result = call_gigachat(msgs, temperature=0.35, top_p=0.9, max_tokens=700)
                sess.update({"context": context_txt, "questions": result})
                ud["q_session"] = sess
                ud["q_state"] = "ready"

                ud["last_input"] = f"{pos} / {comp} / {context_txt}"
                ud["last_mode"] = "questions"
                ud["last_result"] = result

                kb = [[BTN_MORE_Q, BTN_FOLLOWUPS], ["–ú–µ–Ω—é"]]
                return await update.message.reply_text(result, reply_markup=make_kb(kb))
            except Exception as e:
                return await update.message.reply_text(
                    ("–û—à–∏–±–∫–∞: " + str(e)) if lang == "ru" else ("Error: " + str(e)),
                    reply_markup=make_kb([["–ú–µ–Ω—é"]])
                )

        if text == BTN_MORE_Q and ud.get("q_state") == "ready":
            sess = ud.get("q_session")
            if not (sess and sess.get("questions")):
                return await update.message.reply_text(
                    "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤." if lang == "ru"
                    else "Please generate the main list first.",
                    reply_markup=make_kb([["–ú–µ–Ω—é"]])
                )

            pos, comp = sess["position"], sess["company"]
            context_txt = sess.get("context")
            prev_q = sess["questions"]

            await update.message.reply_text("–î–æ–±–∞–≤–ª—è—é –≤–æ–ø—Ä–æ—Å—ã..." if lang == "ru" else "Adding more questions...",
                                            reply_markup=ReplyKeyboardRemove())
            try:
                msgs = build_more_questions_messages(pos, comp, context_txt, prev_q, lang)
                more = call_gigachat(msgs, temperature=0.35, top_p=0.9, max_tokens=500)
                sess["questions"] = prev_q + "\n\n" + more
                ud["q_session"] = sess
                ud["last_result"] = sess["questions"]

                kb = [[BTN_MORE_Q, BTN_FOLLOWUPS], ["–ú–µ–Ω—é"]]
                return await update.message.reply_text(more, reply_markup=make_kb(kb))
            except Exception as e:
                return await update.message.reply_text(
                    ("–û—à–∏–±–∫–∞: " + str(e)) if lang == "ru" else ("Error: " + str(e)),
                    reply_markup=make_kb([["–ú–µ–Ω—é"]])
                )

        if text == BTN_FOLLOWUPS and ud.get("q_state") == "ready":
            sess = ud.get("q_session")
            if not (sess and sess.get("questions")):
                return await update.message.reply_text(
                    "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã." if lang == "ru"
                    else "Please generate questions first.",
                    reply_markup=make_kb([["–ú–µ–Ω—é"]])
                )

            questions_text = sess["questions"]
            await update.message.reply_text("–ì–æ—Ç–æ–≤–ª—é —Ñ–æ–ª–ª–æ—É-–∞–ø—ã..." if lang == "ru" else "Preparing follow-ups...",
                                            reply_markup=ReplyKeyboardRemove())
            try:
                msgs = build_followups_messages(questions_text, lang)
                followups = call_gigachat(msgs, temperature=0.35, top_p=0.9, max_tokens=700)
                kb = [[BTN_MORE_Q], ["–ú–µ–Ω—é"]]
                return await update.message.reply_text(followups, reply_markup=make_kb(kb))
            except Exception as e:
                return await update.message.reply_text(
                    ("–û—à–∏–±–∫–∞: " + str(e)) if lang == "ru" else ("Error: " + str(e)),
                    reply_markup=make_kb([["–ú–µ–Ω—é"]])
                )

        instr = scenario_instruction("questions", lang)
        return await update.message.reply_text(instr, reply_markup=make_kb([["–ú–µ–Ω—é"]]))

    if text in sum(REFINERS.values(), []):
        base = ud.get("last_input")
        mode0 = ud.get("last_mode")
        draft = ud.get("last_result")
        if not base or not mode0:
            return await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å." if lang == "ru" else "Send an initial request first.",
                reply_markup=make_kb([["–ú–µ–Ω—é"]])
            )

        await update.message.reply_text("–î–æ—Ä–∞–±–∞—Ç—ã–≤–∞—é..." if lang == "ru" else "Refining...",
                                        reply_markup=ReplyKeyboardRemove())

        if mode0 == "action":
            msgs = build_refine_messages(mode0, lang, base, draft, text)
            refined = call_gigachat(msgs, temperature=0.5, top_p=0.9, max_tokens=240)
            ud["last_result"] = refined
            return await update.message.reply_text(refined, reply_markup=make_refiners_kb(mode0))
        else:
            return await update.message.reply_text(
                "–†–µ–∂–∏–º –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π." if lang == "ru"
                else "This mode doesn't support that refinement.",
                reply_markup=make_kb([["–ú–µ–Ω—é"]])
            )

    mode = ud.get("mode", "action")

    if mode == "action":
        await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..." if lang == "ru" else "Processing...",
                                        reply_markup=ReplyKeyboardRemove())
        msgs = build_rewrite_messages(text, lang)
        result = call_gigachat(msgs, 0.3, top_p=0.9, max_tokens=120)

        ud["last_input"] = text
        ud["last_mode"] = "action"
        ud["last_result"] = result
        return await update.message.reply_text(result, reply_markup=make_refiners_kb("action"))

    if mode == "structure":
        await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..." if lang == "ru" else "Processing...",
                                        reply_markup=ReplyKeyboardRemove())
        msgs = build_structure_messages(text, lang)
        result = call_gigachat(msgs, 0.5, 0.9, 800)
        ud.update({"last_input": text, "last_mode": "structure", "last_result": result})
        return await update.message.reply_text(result, reply_markup=make_kb([["–ú–µ–Ω—é"]]))

    if mode == "hypotheses":
        await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..." if lang == "ru" else "Processing...",
                                        reply_markup=ReplyKeyboardRemove())
        msgs = build_hypotheses_messages(text, lang)
        result = call_gigachat(msgs, 0.5, 0.9, 500)
        ud.update({"last_input": text, "last_mode": "hypotheses", "last_result": result})
        return await update.message.reply_text(result, reply_markup=make_kb([["–ú–µ–Ω—é"]]))

    if mode == "frameworks":
        await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..." if lang == "ru" else "Processing...",
                                        reply_markup=ReplyKeyboardRemove())
        msgs = build_frameworks_messages(text, lang)
        result = call_gigachat(msgs, 0.5, 0.9, 500)
        ud.update({"last_input": text, "last_mode": "frameworks", "last_result": result})
        return await update.message.reply_text(result, reply_markup=make_kb([["–ú–µ–Ω—é"]]))

    kb = [["–≠–∫—à–Ω-—Ç–∞–π—Ç–ª—ã", "–í–æ–ø—Ä–æ—Å—ã"], ["–°—Ç—Ä—É–∫—Ç—É—Ä–∞", "–ì–∏–ø–æ—Ç–µ–∑—ã"], ["–§—Ä–µ–π–º–≤–æ—Ä–∫–∏", LANG_BUTTON]]
    return await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤ –º–µ–Ω—é" if lang == "ru" else "Choose a scenario in the menu",
        reply_markup=make_kb(kb),
    )
