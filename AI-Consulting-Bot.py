import os, sys
import time
import uuid
import requests
from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler

load_dotenv()
VERIFY_CERT_PATH = os.getenv("VERIFY_CERT_PATH")
AUTH_KEY = os.getenv("AUTH_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

token_cache = {"value": None, "ts": 0, "ttl": 36000}

if not os.getenv("TELEGRAM_TOKEN") or not os.getenv("AUTH_KEY"):
    print("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN –∏–ª–∏ AUTH_KEY")
    sys.exit(1)


def get_access_token() -> str:
    now = time.time()
    if token_cache["value"] and now - token_cache["ts"] < token_cache["ttl"]:
        return token_cache["value"]
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "RqUID": str(uuid.uuid4()),
        "Authorization": f"Basic {AUTH_KEY}"
    }
    resp = requests.post(url, headers=headers, data="scope=GIGACHAT_API_PERS", verify=VERIFY_CERT_PATH)
    resp.raise_for_status()
    token = resp.json()["access_token"]
    token_cache.update({"value": token, "ts": now})
    return token


def call_gigachat(messages: list, temperature: float, top_p: float = 0.9, max_tokens: int = 120) -> str:
    token = get_access_token()
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    payload = {
        "model": "GigaChat",
        "messages": messages,
        "temperature": temperature,
        "top_p": top_p,
        "max_tokens": max_tokens
    }
    resp = requests.post(url, headers=headers, json=payload, verify=VERIFY_CERT_PATH)
    resp.raise_for_status()
    return resp.json()["choices"][0]["message"]["content"].strip()


def build_rewrite_messages(text: str, lang: str) -> list:
    if lang == "en":
        system = (
            "You are a strategy consultant preparing slides for a business presentation in English. "
            "You will be given a business statement, possibly in another language (e.g., Russian)."
            "Your task is to: "
            "1. Translate the input into clear and professional English. "
            "2. Reformulate it into a concise, insightful presentation slide title (15-20 words) in only one sentence. "
            "3. Keep only the core idea, omit generic or verbose phrasing. "
            "Respond only in English."
        )
    else:
        system = (
            "–¢—ã ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ –≥–æ—Ç–æ–≤–∏—à—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–ª–∞–π–¥–æ–≤ –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
            "–¢–µ–±–µ –ø–µ—Ä–µ–¥–∞—é—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Å–∏—Ç—É–∞—Ü–∏–∏ –≤ 10‚Äì20 —Å–ª–æ–≤–∞—Ö. –¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º). "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞: "
            "1. –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π. "
            "2. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π action –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞ 15-20 —Å–ª–æ–≤. "
            "3. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∫–ª—é—á–µ–≤–æ–π –º—ã—Å–ª–∏, –∏–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫, –Ω–æ –Ω–µ —É–∫—Ä–æ–∞—á–∏–≤–∞–π –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ. "
            "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
        )
    return [
        {"role": "system", "content": system},
        {"role": "user", "content": text}
    ]


def build_questions_messages(position, company, lang):
    if lang == "en":
        user = f"Formulate 5‚Äì7 strategic questions to ask a {position} at {company}. Use a numbered list."
    else:
        user = (
            f"–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 5‚Äì7 —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {position} "
            f"–≤ –∫–æ–º–ø–∞–Ω–∏–∏ {company}. –§–æ—Ä–º–∞—Ç ‚Äî –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫."
        )
    return [{"role": "user", "content": user}]


def build_structure_messages(text, lang):
    if lang == "en":
        system = (
            "You are a strategy consultant. Given a couple of paragraphs about the client's task, goals, audience, and presentation format, "
            "Decompose the problem into subproblems and describe an approach to analyzing and generating initiatives and come up with slide headings."
        )
    else:
        system = (
            "–¢—ã ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –¢–µ–±–µ –¥–∞—é—Ç –ø–∞—Ä—É –∞–±–∑–∞—Ü–µ–≤ –ø—Ä–æ –∑–∞–¥–∞—á—É –∫–ª–∏–µ–Ω—Ç–∞, —Ü–µ–ª–∏, –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏. "
            "–î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—É –Ω–∞ –ø–æ–¥–ø—Ä–æ–±–ª–µ–º—ã –∏ –æ–ø–∏—à–∏ –ø–æ–¥—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏–∑—É –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤ –∏ –ø—Ä–∏–¥—É–º–∞–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–ª–∞–π–¥–æ–≤."
        )
    return [{"role": "system", "content": system}, {"role": "user", "content": text}]


def build_hypotheses_messages(text, lang):
    if lang == "en":
        system = (
            "You are a consulting analyst. Given a brief problem description and market context, "
            "generate 6‚Äì8 hypotheses grouped by key drivers."
        )
    else:
        system = (
            "–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –≤ –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–µ. –¢–µ–±–µ –¥–∞—é—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä—ã–Ω–∫–∞. "
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 6‚Äì8 –≥–∏–ø–æ—Ç–µ–∑, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥—Ä–∞–π–≤–µ—Ä–∞–º."
        )
    return [{"role": "system", "content": system}, {"role": "user", "content": text}]


def build_frameworks_messages(text, lang):
    if lang == "en":
        system = (
            "You are a methodology consultant. Given a problem statement in 1-2 sentences, "
            "choose 2‚Äì3 analytical models or frameworks with justification and application approach."
        )
    else:
        system = (
            "–¢—ã ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è–º. –¢–µ–±–µ –¥–∞—é—Ç —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –ø—Ä–æ–±–ª–µ–º—ã –≤ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö. "
            "–ü–æ–¥–±–µ—Ä–∏ 2‚Äì3 –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–¥—Ö–æ–¥–∞."
        )
    return [{"role": "system", "content": system}, {"role": "user", "content": text}]


def make_kb(rows, with_menu=False):
    kb = rows.copy()
    if with_menu:
        kb.append(["–ú–µ–Ω—é"])
    return ReplyKeyboardMarkup([[KeyboardButton(t) for t in row] for row in kb], resize_keyboard=True)


MODE_OPTIONS = {
    "–≠–∫—à–Ω-—Ç–∞–π—Ç–ª—ã": "action",
    "–í–æ–ø—Ä–æ—Å—ã": "questions",
    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞": "structure",
    "–ì–∏–ø–æ—Ç–µ–∑—ã": "hypotheses",
    "–§—Ä–µ–π–º–≤–æ—Ä–∫–∏": "frameworks"
}
LANG_OPTIONS = {"üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru", "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "en"}
LANG_BUTTON = "–Ø–∑—ã–∫"


async def show_main_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.setdefault("lang", "ru")
    ctx.user_data.setdefault("creativity", 3)
    ctx.user_data.setdefault("mode", "action")

    lang = ctx.user_data["lang"]


    if lang == "ru":
        msg = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–∞. –ü–æ–º–æ–≥–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º –≥–æ—Ç–æ–≤–∏—Ç—å "
            "–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π, –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤.\n\n"
            "‚öôÔ∏è <b>–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:</b>\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–±–æ—Ç—ã\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
            "3. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ —Å–µ–∫—É–Ω–¥—ã\n"
            "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ú–µ–Ω—é\" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞\n\n"
            "üöÄ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:</b>\n"
            "üîÅ <b>–≠–∫—à–Ω-—Ç–∞–π—Ç–ª—ã</b>: –ü—Ä–µ–≤—Ä–∞—â–∞—é —Å–ª–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –≤ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ, —ç—Ñ—Ñ–µ–∫—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–ª–∞–π–¥–æ–≤. "
            "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π.\n\n"
            "‚ùì <b>–í–æ–ø—Ä–æ—Å—ã</b>: –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏. –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è "
            "–∫ –≤—Å—Ç—Ä–µ—á–∞–º —Å —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏.\n\n"
            "üß© <b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞</b>: –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–æ–≥–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. "
            "–í–∫–ª—é—á–∞—é –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–ª–∞–π–¥–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥.\n\n"
            "üîç <b>–ì–∏–ø–æ—Ç–µ–∑—ã</b>: –§–æ—Ä–º—É–ª–∏—Ä—É—é –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–±–ª–µ–º. –ì—Ä—É–ø–ø–∏—Ä—É—é –ø–æ –∫–ª—é—á–µ–≤—ã–º "
            "–¥—Ä–∞–π–≤–µ—Ä–∞–º –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "‚öôÔ∏è <b>–§—Ä–µ–π–º–≤–æ—Ä–∫–∏</b>: –ü–æ–¥–±–∏—Ä–∞—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è "
            "–≤–∞—à–µ–π –∑–∞–¥–∞—á–∏. –° –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏ —Å–ø–æ—Å–æ–±–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.\n\n"
            "üåê –¢–µ–∫—É—â–∏–π —è–∑—ã–∫: <b>–†—É—Å—Å–∫–∏–π</b>\n"
        )
    else:
        msg = (
            "üëã Hello! I'm an AI consulting bot. I help prepare materials for business presentations:\n\n"
            "üîÅ Action titles: reformulate phrase into title\n"
            "‚ùì Questions: generate interview questions\n"
            "üß© Structure: prepare presentation storyline\n"
            "üîç Hypotheses: generate problem hypotheses\n"
            "‚öôÔ∏è Frameworks: select frameworks with descriptions\n\n"
            "Current language: English"
        )

    kb = [[key] for key in MODE_OPTIONS.keys()]
    kb.append([LANG_BUTTON])

    await update.message.reply_text(msg, reply_markup=make_kb(kb), parse_mode="HTML")
    await update.message.delete()


def scenario_instruction(mode, lang):
    if lang == "en":
        instr = {
            "action": (
                "You selected Action titles. Enter a phrase up to 200 characters.\n\n"
                "Example: Rising logistics costs are slowing business scaling"
            ),
            "questions": (
                "You selected Questions generator. Enter position and company in format:\n\n"
                "[position] at [company]\nExample: 'IT Director at VTB'"
            ),
            "structure": (
                "You selected Presentation structure. Enter 1-2 paragraphs about:\n"
                "- Client task\n- Goals\n- Audience\n- Presentation format\n\n"
                "Example: Client X wants to increase revenue through Y. Target audience is Z. Format: pitch deck."
            ),
            "hypotheses": (
                "You selected Hypotheses generator. Enter brief problem description and market context.\n\n"
                "Example: Online education market is declining due to falling demand. Competitors focus on B2B."
            ),
            "frameworks": (
                "You selected Framework selection. Describe your problem in 1-2 sentences.\n\n"
                "Example: Decrease in customer satisfaction with online purchases due to UX issues."
            )
        }
    else:
        instr = {
            "action": (
                "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–∫—à–Ω-—Ç–∞–π—Ç–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–µ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫.\n\n"
                "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: –†–æ—Å—Ç –∏–∑–¥–µ—Ä–∂–µ–∫ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É –∑–∞–º–µ–¥–ª—è–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞"
            ),
            "questions": (
                "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é. –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∫–æ–º–ø–∞–Ω–∏—é —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "[–¥–æ–ª–∂–Ω–æ—Å—Ç—å] –≤ [–∫–æ–º–ø–∞–Ω–∏—è]\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: '–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ò–¢ –≤ –í–¢–ë'"
            ),
            "structure": (
                "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø—Ä–æ:\n"
                "- –ó–∞–¥–∞—á—É –∫–ª–∏–µ–Ω—Ç–∞\n- –¶–µ–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏\n- –ê—É–¥–∏—Ç–æ—Ä–∏—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏\n- –§–æ—Ä–º–∞—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏\n\n"
                "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: –ö–ª–∏–µ–Ω—Ç X —Ö–æ—á–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –≤—ã—Ä—É—á–∫—É –∑–∞ —Å—á–µ—Ç Y. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è ‚Äî Z. –§–æ—Ä–º–∞—Ç ‚Äî –ø–∏—Ç—á-–¥–µ–∫."
            ),
            "hypotheses": (
                "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–∏–ø–æ—Ç–µ–∑. –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∞ —è –ø—Ä–µ–¥–ª–æ–∂—É –≥–∏–ø–æ—Ç–µ–∑—ã.\n\n"
                "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: –†—ã–Ω–æ–∫ –æ–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–∞–¥–∞–µ—Ç –∏–∑-–∑–∞ —Å–Ω–∏–∂–µ–Ω–∏—è —Å–ø—Ä–æ—Å–∞. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã —Ñ–æ–∫—É—Å–∏—Ä—É—é—Ç—Å—è –Ω–∞ B2B."
            ),
            "frameworks": (
                "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –ø–æ–¥–±–æ—Ä–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, –∞ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: –°–Ω–∏–∂–µ–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –æ–Ω–ª–∞–π–Ω-–ø–æ–∫—É–ø–∫–∞—Ö –∏–∑-–∑–∞ UX."
            )
        }
    return instr.get(mode, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π." if lang == "ru" else "Error: unknown scenario.")


async def handle_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_data = ctx.user_data
    lang = user_data.get("lang", "ru")

    if text == "–ú–µ–Ω—é":
        return await show_main_menu(update, ctx)

    if text == LANG_BUTTON:

        kb = [list(LANG_OPTIONS.keys()), ["–ú–µ–Ω—é"]]
        msg = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:" if lang == "ru" else "Select language:"
        await update.message.reply_text(msg, reply_markup=make_kb(kb))
        return

    if text in LANG_OPTIONS:
        user_data['lang'] = LANG_OPTIONS[text]
        lang_name = "–†—É—Å—Å–∫–∏–π" if LANG_OPTIONS[text] == "ru" else "English"
        await update.message.reply_text(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {lang_name} / Language changed to {lang_name}")
        await show_main_menu(update, ctx)
        return

    if text.isdigit() and 1 <= int(text) <= 5:
        user_data['creativity'] = int(text)
        await update.message.reply_text(f"–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {text}", reply_markup=make_kb([["–ú–µ–Ω—é"]]))
        return

    if text in MODE_OPTIONS:
        mode = MODE_OPTIONS[text]
        user_data['mode'] = mode
        instr = scenario_instruction(mode, lang)
        await update.message.reply_text(instr, reply_markup=make_kb([["–ú–µ–Ω—é"]]))
        return

    await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..." if lang == "ru" else "Processing...",
                                    reply_markup=ReplyKeyboardRemove())
    mode = user_data['mode']

    try:
        if mode == 'action':
            msgs = build_rewrite_messages(text, lang)
            result = call_gigachat(msgs, 0.3, max_tokens=120)

        elif mode == 'questions':
            if lang == "ru":
                if " –≤ " not in text:
                    raise ValueError("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: [–î–æ–ª–∂–Ω–æ—Å—Ç—å] –≤ [–ö–æ–º–ø–∞–Ω–∏—è]")
                pos, comp = text.split(" –≤ ", 1)
            else:
                if " at " not in text:
                    raise ValueError("Use format: [Position] at [Company]")
                pos, comp = text.split(" at ", 1)

            msgs = build_questions_messages(pos.strip(), comp.strip(), lang)
            result = call_gigachat(msgs, 0.3, 0.9, 600)

        elif mode == 'structure':
            msgs = build_structure_messages(text, lang)
            result = call_gigachat(msgs, 0.5, 0.9, 400)

        elif mode == 'hypotheses':
            msgs = build_hypotheses_messages(text, lang)
            result = call_gigachat(msgs, 0.5, 0.9, 500)

        else:
            msgs = build_frameworks_messages(text, lang)
            result = call_gigachat(msgs, 0.5, 0.9, 500)

        await update.message.reply_text(result, reply_markup=make_kb([["–ú–µ–Ω—é"]]))
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞: {e}" if lang == "ru" else f"Error: {e}"
        await update.message.reply_text(error_msg, reply_markup=make_kb([["–ú–µ–Ω—é"]]))


def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", show_main_menu))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
    app.run_polling()


if __name__ == "__main__":
    main()
