import os
import logging
import asyncio
from flask import Flask, request, abort
from concurrent.futures import ThreadPoolExecutor
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

executor = ThreadPoolExecutor()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

@app.before_request
def log_all_requests():
    logger.info(f"üëÄ –í—Ö–æ–¥—è—â–∏–π {request.method} –Ω–∞ {request.path}")

def init_telegram_app():
    token = os.getenv("TELEGRAM_TOKEN")
    application = Application.builder().token(token).build()

    from ai_consulting_bot import start, handle_text

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logger.info("‚úÖ Telegram application —Å–æ–∑–¥–∞–Ω–∞")
    return application

telegram_app = init_telegram_app()

@app.route("/", methods=["GET"])
def health_check():
    return "Bot is running", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    logger.info("‚Üí –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ /webhook")
    logger.info(f"üì© RAW body: {request.data}")

    if request.headers.get("content-type") != "application/json":
        logger.warning("Invalid content-type")
        abort(400, "Invalid content-type")

    data = request.get_json(silent=True)
    if not data:
        logger.warning("Empty request body")
        abort(400, "Empty request body")

    try:
        update = Update.de_json(data, telegram_app.bot)

        def handle():
            asyncio.run(telegram_app.process_update(update))

        executor.submit(handle)

        return "OK", 200

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: {e}")
        return "Internal Server Error", 500

async def setup_bot():
    try:
        await telegram_app.initialize()
        await telegram_app.start()
        logger.info("‚úÖ Telegram application –∑–∞–ø—É—â–µ–Ω–∞")

        domain = os.getenv("RENDER_EXTERNAL_URL")
        if not domain:
            logger.error("‚ùå RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω!")
            return False

        webhook_url = f"{domain}/webhook"
        result = await telegram_app.bot.set_webhook(webhook_url)
        logger.info(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url} (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result})")

        webhook_info = await telegram_app.bot.get_webhook_info()
        logger.info(f"‚ÑπÔ∏è Webhook info: {webhook_info}")

        return True

    except Exception as e:
        logger.exception(f"‚ùå Setup bot failed: {e}")
        return False

if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    try:
        success = loop.run_until_complete(setup_bot())
        if not success:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
            exit(1)

        port = int(os.environ.get("PORT", 5000))
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        app.run(host="0.0.0.0", port=port, use_reloader=False)

    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        loop.run_until_complete(telegram_app.stop())
        loop.close()
